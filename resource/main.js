/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TabKeyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var DEFAULT_SETTINGS = {
  indentsIfSelection: true,
  indentsIfSelectionOnlyForMultipleLines: true,
  useSpaces: false,
  alignSpaces: false,
  useHardSpace: true,
  spacesCount: 4,
  allowException: true,
  exceptionRegex: "^[\\s\xA0]*(-|\\d+\\.)( \\[ \\])?\\s*$",
  useAdvancedTables: true,
  useOutlinerBetterTab: true
};
var TabKeyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    let outlinerIndenting = false;
    this.registerEditorExtension(import_state.Prec.highest(import_view.keymap.of([{
      key: "Tab",
      run: () => {
        if (outlinerIndenting)
          return false;
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (!view)
          return false;
        let editor = view.editor;
        let cursorFrom = editor.getCursor("from");
        let cursorTo = editor.getCursor("to");
        let somethingSelected = cursorFrom.line != cursorTo.line || cursorFrom.ch != cursorTo.ch;
        const app = this.app;
        if (this.settings.useOutlinerBetterTab && RegExp("^[\\s]*(-|\\d+\\.)", "u").test(editor.getLine(cursorFrom.line))) {
          let prevLine = editor.getLine(cursorFrom.line);
          outlinerIndenting = true;
          app.commands.executeCommandById("obsidian-outliner:indent-list");
          outlinerIndenting = false;
          if (prevLine != editor.getLine(cursorFrom.line)) {
            return true;
          }
        }
        if (this.settings.useAdvancedTables && RegExp(`^\\|`, "u").test(editor.getLine(cursorFrom.line))) {
          app.commands.executeCommandById("table-editor-obsidian:next-cell");
          return true;
        }
        if (somethingSelected && this.settings.indentsIfSelection && (!this.settings.indentsIfSelectionOnlyForMultipleLines || cursorTo.line != cursorFrom.line)) {
          editor.exec("indentMore");
        } else {
          let cursorFrom2 = editor.getCursor("from");
          let tabStr = this.settings.useSpaces ? (this.settings.useHardSpace ? "\xA0" : " ").repeat(this.settings.alignSpaces ? this.settings.spacesCount - cursorFrom2.ch % this.settings.spacesCount : this.settings.spacesCount) : "	";
          if (!somethingSelected && this.settings.allowException) {
            if (RegExp(this.settings.exceptionRegex, "u").test(editor.getLine(cursorFrom2.line))) {
              editor.exec("indentMore");
              return true;
            }
          }
          editor.replaceSelection(tabStr);
          editor.setCursor({ line: cursorFrom2.line, ch: cursorFrom2.ch + tabStr.length });
        }
        return true;
      },
      preventDefault: true
    }])));
  }
  createKeymapRunCallback() {
    return (view) => {
      return true;
    };
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h5", { text: "黑曜石Tab插件" });
    containerEl.createEl("b", { text: "恢复Tab键功能使tab 键按照原有的方式插入制表符." });
    containerEl.createEl("br");
    containerEl.createEl("br");
    containerEl.createEl("h2", { text: "Tab或空格设置" });
    new import_obsidian.Setting(containerEl).setName("使用空格代替Tab").setDesc("关闭(默认):按下Tab键时插入制表符 (\\t). 打开:按下 Tab 键时插入空格 (\xA0\xA0\xA0\xA0).").addToggle((toggle) => toggle.setValue(this.plugin.settings.useSpaces).onChange(async (value) => {
      this.plugin.settings.useSpaces = value;
      this.display();
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.useSpaces) {
      new import_obsidian.Setting(containerEl).setName("使用硬空格").setDesc(`如果"使用制表符缩进"设置为否，将使用空格进行缩进。如果"使用硬空格"关闭，将使用普通的空格字符。请注意,在Markdown中,重复的普通空格会被渲染为一个空格。打开此选项以使用硬空格(U+00A0),在Markdown渲染后不会被截断。为了在处理过的Markdown输出中缩进内容，请将光标移动到开头，然后按Tab键(缩进不会插入硬空格).`).addToggle((toggle) => toggle.setValue(this.plugin.settings.useHardSpace).onChange(async (value) => {
        this.plugin.settings.useHardSpace = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("空格数").setDesc("使用Tab键时插入的空格或硬空格的数量。默认值:4").addSlider((slider) => slider.setValue(this.plugin.settings.spacesCount).setLimits(2, 8, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.spacesCount = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian.Setting(containerEl).setName("对齐空格(就像制表符的行为一样)").setDesc('在空格计数为4的情况下，按下“abc”后再按Tab键会插入一个空格，而在“abcde”后插入Tab键则会插入3个空格，因此按Tab键后的结束位置始终是空格计数的整数倍').addToggle((toggle) => toggle.setValue(this.plugin.settings.alignSpaces).onChange(async (value) => {
        this.plugin.settings.alignSpaces = value;
        await this.plugin.saveSettings();
      }));
    }
    containerEl.createEl("h2", { text: "Tab键功能" });
    new import_obsidian.Setting(containerEl).setName("当选择不为空时缩进").setDesc("打开(默认):选择一些文本并按 Tab 键将缩进所选行。与大多数 IDE 的行为相同. \n关闭:选择将被一个选项卡替换").addToggle((toggle) => toggle.setValue(this.plugin.settings.indentsIfSelection).onChange(async (value) => {
      this.plugin.settings.indentsIfSelection = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.indentsIfSelection) {
      new import_obsidian.Setting(containerEl).setName("多行缩进").setDesc("打开(默认):如果所选内容只有一行，则制表符（或空格）将替换所选内容").addToggle((toggle) => toggle.setValue(this.plugin.settings.indentsIfSelectionOnlyForMultipleLines).onChange(async (value) => {
        this.plugin.settings.indentsIfSelectionOnlyForMultipleLines = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(containerEl).setName("允许对缩进进行例外处理").setDesc("当行与正则表达式匹配时，即使选择为空，也会缩进行").addToggle((toggle) => toggle.setValue(this.plugin.settings.allowException).onChange(async (value) => {
      this.plugin.settings.allowException = value;
      this.display();
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.allowException) {
      new import_obsidian.Setting(containerEl).setName("异常正则表达式").setDesc("默认值:无论在列表中都缩进(零个或多个空格,后跟 - 或数字。然后可以选择一个复选框,然后是一个空格)。删除尾随 $ 以在非空列表中启用缩进").addText((textbox) => textbox.setValue(this.plugin.settings.exceptionRegex).setPlaceholder("Regex").onChange(async (value) => {
        this.plugin.settings.exceptionRegex = value;
        await this.plugin.saveSettings();
      })).addExtraButton((button) => button.setIcon("rotate-ccw").onClick(async () => {
        this.plugin.settings.exceptionRegex = "^[\\s\xA0]*(-|\\d+\\.)( \\[ \\])?\\s*$";
        this.display();
        await this.plugin.saveSettings();
      }));
    }
    containerEl.createEl("h2", { text: "插件兼容性" });
    new import_obsidian.Setting(containerEl).setName("与高级表格插件一起使用").setDesc("当光标位于表格中时创建新表格或转到下一个单元格").addToggle((toggle) => toggle.setValue(this.plugin.settings.useAdvancedTables).onChange(async (value) => {
      this.plugin.settings.useAdvancedTables = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("与Obsidian Outliner插件一起使用").setDesc("尝试在按下 Tab 时执行 Outliner 缩进操作，如果没有任何更改，则使用默认的恢复 Tab 键插件行为").addToggle((toggle) => toggle.setValue(this.plugin.settings.useOutlinerBetterTab).onChange(async (value) => {
      this.plugin.settings.useOutlinerBetterTab = value;
      await this.plugin.saveSettings();
    }));
  }
};
